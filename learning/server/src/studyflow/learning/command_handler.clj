(ns studyflow.learning.command-handler
  (:require [studyflow.events :as evt]
            [studyflow.learning.commands])
  (:import (studyflow.learning.commands AnswerQuestion! OpenLearningStep!)))

(defmulti aggregates
  "given a command, return the ids of the aggregates that should be
  fetched before calling handle-command. The first aggregate should be
  the target of the events generated by handle-command."
  (fn [command]
    (class command)))

(defmulti handle-command
  "handle command given aggregates. returns a seq of events"
  (fn [command & aggregates]
    (class command)))

(defmethod aggregates StartLearningStep!
  [command]
  (map command [:learning-step-id :work-id :student-id]))

(defmethod handle-command OpenLearningStep!
  [command learning-step work student]
  (cond (nil? work)
        (evt/map->StudentStartedWorkOnLearningStep (select-keys command [:student-id :work-id :learning-step-id]))
        
        (= (select-keys work [:student-id :work-id :learning-step-id])
           (select-keys command [:student-id :work-id :learning-step-id]))
        (evt/map->StudentContinuedWorkOnLearningStep (select-keys command [:student-id :work-id :learning-step-id]))))


(defmethod aggregates AnswerQuestion!
  [command]
  (map command [:work-id :student-id :task-id :question-id]))

(defmethod handle-command AnswerQuestion!
  [{value :value} student work task question]
  (get (:revealed-question-ids work))
  )
